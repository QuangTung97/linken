// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package linken

import (
	"sync"
	"time"
)

// Ensure, that groupTimerMock does implement groupTimer.
// If this is not the case, regenerate this file with moq.
var _ groupTimer = &groupTimerMock{}

// groupTimerMock is a mock implementation of groupTimer.
//
// 	func TestSomethingThatUsesgroupTimer(t *testing.T) {
//
// 		// make and configure a mocked groupTimer
// 		mockedgroupTimer := &groupTimerMock{
// 			stopFunc: func()  {
// 				panic("mock out the stop method")
// 			},
// 		}
//
// 		// use mockedgroupTimer in code that requires groupTimer
// 		// and then make assertions.
//
// 	}
type groupTimerMock struct {
	// stopFunc mocks the stop method.
	stopFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// stop holds details about calls to the stop method.
		stop []struct {
		}
	}
	lockstop sync.RWMutex
}

// stop calls stopFunc.
func (mock *groupTimerMock) stop() {
	if mock.stopFunc == nil {
		panic("groupTimerMock.stopFunc: method is nil but groupTimer.stop was just called")
	}
	callInfo := struct {
	}{}
	mock.lockstop.Lock()
	mock.calls.stop = append(mock.calls.stop, callInfo)
	mock.lockstop.Unlock()
	mock.stopFunc()
}

// stopCalls gets all the calls that were made to stop.
// Check the length with:
//     len(mockedgroupTimer.stopCalls())
func (mock *groupTimerMock) stopCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockstop.RLock()
	calls = mock.calls.stop
	mock.lockstop.RUnlock()
	return calls
}

// Ensure, that groupTimerFactoryMock does implement groupTimerFactory.
// If this is not the case, regenerate this file with moq.
var _ groupTimerFactory = &groupTimerFactoryMock{}

// groupTimerFactoryMock is a mock implementation of groupTimerFactory.
//
// 	func TestSomethingThatUsesgroupTimerFactory(t *testing.T) {
//
// 		// make and configure a mocked groupTimerFactory
// 		mockedgroupTimerFactory := &groupTimerFactoryMock{
// 			newTimerFunc: func(name string, d time.Duration) groupTimer {
// 				panic("mock out the newTimer method")
// 			},
// 		}
//
// 		// use mockedgroupTimerFactory in code that requires groupTimerFactory
// 		// and then make assertions.
//
// 	}
type groupTimerFactoryMock struct {
	// newTimerFunc mocks the newTimer method.
	newTimerFunc func(name string, d time.Duration) groupTimer

	// calls tracks calls to the methods.
	calls struct {
		// newTimer holds details about calls to the newTimer method.
		newTimer []struct {
			// Name is the name argument value.
			Name string
			// D is the d argument value.
			D time.Duration
		}
	}
	locknewTimer sync.RWMutex
}

// newTimer calls newTimerFunc.
func (mock *groupTimerFactoryMock) newTimer(name string, d time.Duration) groupTimer {
	if mock.newTimerFunc == nil {
		panic("groupTimerFactoryMock.newTimerFunc: method is nil but groupTimerFactory.newTimer was just called")
	}
	callInfo := struct {
		Name string
		D    time.Duration
	}{
		Name: name,
		D:    d,
	}
	mock.locknewTimer.Lock()
	mock.calls.newTimer = append(mock.calls.newTimer, callInfo)
	mock.locknewTimer.Unlock()
	return mock.newTimerFunc(name, d)
}

// newTimerCalls gets all the calls that were made to newTimer.
// Check the length with:
//     len(mockedgroupTimerFactory.newTimerCalls())
func (mock *groupTimerFactoryMock) newTimerCalls() []struct {
	Name string
	D    time.Duration
} {
	var calls []struct {
		Name string
		D    time.Duration
	}
	mock.locknewTimer.RLock()
	calls = mock.calls.newTimer
	mock.locknewTimer.RUnlock()
	return calls
}
